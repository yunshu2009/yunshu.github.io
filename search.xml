<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[一些数据库知识点学习总结]]></title>
    <url>%2F2018%2F03%2F20%2F%E4%B8%80%E4%BA%9B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9F%A5%E8%AF%86%E7%82%B9%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[一些笔记/学习总结，写的不好，欢迎拍砖^ ^ 更新时间2017-3-20 19:45 关系型数据库关系型数据库的三范式第一范式（1NF）: 每一列都是不可分割的原子数据项(基本类型列) 第二范式（2NF）： 要求实体的属性完全依赖于主关键字(无重复行) 第三范式（3NF）: 数据表不包含其它表已有的非主属性(无数据冗余) 关于数据库的规范设计，都会谈到是否符合三范式。但是考虑到数据库的性能优化，也不必都按照三范式来设计，可以做数据的适当冗余。如为了查询效率，在商品表，可以设置个img_url字段放图片的主图。 MySQL本质了解mysql逻辑架构 1.最上层是一些客户端和连接服务，包含本地sock通信和大多数基于客户端/服务端工具实现的类似于tcp/ip的通信。主要完成一些类似于连接处理、授权认证、及相关的安全方案。在该层上引入了线程池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全链接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。 2.第二层架构主要完成大多少的核心服务功能，如SQL接口，并完成缓存的查询，SQL的分析和优化及部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如过程、函数等。在该层，服务器会解析查询并创建相应的内部解析树，并对其完成相应的优化如确定查询表的顺序，是否利用索引等，最后生成相应的执行操作。如果是select语句，服务器还会查询内部的缓存。如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能。 3.存储引擎层，存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API与存储引擎进行通信。不同的存储引擎具有的功能不同，这样我们可以根据自己的实际需要进行选取。 4.数据存储层，主要是将数据存储在运行于裸设备的文件系统之上，并完成与存储引擎的交互。 MySQL插件NoSql 插件 HandlerSocket 中文全文索引插件 mysqlcft （mysql5.7内置有n-gram parser插件） 新存储引擎XtraDB 可能成为InnoDB存储引擎的替代 MySQL中的事务事务的ACID:• 原子性(Atomicity ) 全部执行或全部不执行 • 一致性( Consistency ) 事务前后数据都是一致性状态,约束等 • 隔离性或独立性( Isolation) 事务之间是独立的,和级别相关 • 持久性(Durabilily) 事务完成即持久化存储 MysSQL锁表类型 表级锁(MyISAM):开销小,加锁快;不会出现死锁;锁定粒 度大,发生锁冲突的概率最高,并发度最低 可以通过检查table_locks_waited和table_locks_immediate状态变量来分析系统上的表锁定争夺： mysql> show status like 'table%'; +-----------------------+-------+ | Variable_name | Value | +-----------------------+-------+ | Table_locks_immediate | 2979 | | Table_locks_waited | 0 | +-----------------------+-------+ 2 rows in set (0.00 sec)) 如果Table_locks_waited的值比较高，则说明存在着较严重的表级锁争用情况。 MySQL的表级锁有两种模式：表共享读锁（Table Read Lock）和表独占写锁（Table Write Lock）。锁模式的兼容性如表20-1所示。 MySQL中的表锁兼容性 请求锁模式 是否兼容 当前锁模式 None 读锁 写锁 读锁 是 是 否 写锁 是 否 否 行级锁(InnoDB):开销大,加锁慢;会出现死锁;锁定粒度最 小,发生锁冲突的概率最低,并发度也最高 show status like ‘innodb_row_lock%’; 获取InnoDB行锁争用情况 可以通过检查InnoDB_row_lock状态变量来分析系统上的行锁的争夺情况： mysql&gt; show status like ‘innodb_row_lock%’;+——————————-+——-+| Variable_name | Value |+——————————-+——-+| InnoDB_row_lock_current_waits | 0 || InnoDB_row_lock_time | 0 || InnoDB_row_lock_time_avg | 0 || InnoDB_row_lock_time_max | 0 || InnoDB_row_lock_waits | 0 |+——————————-+——-+5 rows in set (0.01 sec)如果发现锁争用比较严重，如InnoDB_row_lock_waits和InnoDB_row_lock_time_avg的值比较高，还可以通过设置InnoDB Monitors来进一步观察发生锁冲突的表、数据行等，并分析锁争用的原因。 页面锁:开销和加锁时间界于表锁和行锁之间;会出现死锁;锁定 粒度界于表锁和行锁之间,并发度一般 使用悲观锁和乐观锁解决并发悲观锁在关系数据库管理系统里，悲观并发控制（又名“悲观锁”，Pessimistic Concurrency Control，缩写“PCC”）是一种并发控制的方法。它可以阻止一个事务以影响其他用户的方式来修改数据。如果一个事务执行的操作都某行数据应用了锁，那只有当这个事务把锁释放，其他事务才能够执行与该锁冲突的操作。悲观并发控制主要用于数据争用激烈的环境，以及发生并发冲突时使用锁保护数据的成本要低于回滚事务的成本的环境中。 在DBMS中，悲观锁正是利用数据库本身提供的锁机制来实现的。 乐观锁乐观锁（ Optimistic Locking ） 相对悲观锁而言，乐观锁假设认为数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则让返回用户错误的信息，让用户决定如何去做。 参考： mysql悲观锁总结和实践 mysql乐观锁总结和实践 深入理解乐观锁与悲观锁 海量数据的分页优化方案 建立合适的索引 使用Redis缓存count,根据访问热度缓存靠后的分页数据 查找出limit的开始行id，然后用where拼接，如：where id&gt;*** limit 0,99 产品设计优化]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PsySH-好用的php交互式控制台]]></title>
    <url>%2F2018%2F03%2F19%2FPsySH-%E5%A5%BD%E7%94%A8%E7%9A%84php%E4%BA%A4%E4%BA%92%E5%BC%8F%E6%8E%A7%E5%88%B6%E5%8F%B0%2F</url>
    <content type="text"><![CDATA[参考：PsySH——PHP交互式控制台]]></content>
  </entry>
  <entry>
    <title><![CDATA[关于生活的一些话]]></title>
    <url>%2F2018%2F02%2F26%2F%E5%85%B3%E4%BA%8E%E7%94%9F%E6%B4%BB%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AF%9D%2F</url>
    <content type="text"><![CDATA[觉得丧的时候不妨尝试让自己忙起来。忙到脚后跟打后脑勺的那种，这样就不会有时间去想东想西了。 百分之九十九的丧都是闲出来的，又闲又没钱，没有目标，整天焦虑到不行还觉得很累。特别容易不开心，还说不出到底是为啥不开心。 而忙起来的时候这些东西就很轻易被忘了。一天下来只想洗个澡好好睡觉，什么东西都没有一张床来得舒坦。 所以还是好好赚钱吧。有钱了想买买，想吃吃，想旅游就去旅游，哪有什么丧不丧的。]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[区块链书籍]]></title>
    <url>%2F2018%2F02%2F26%2F%E5%8C%BA%E5%9D%97%E9%93%BE%E4%B9%A6%E7%B1%8D%2F</url>
    <content type="text"><![CDATA[《比特币白皮书》《图说区块链》《区块链革命》]]></content>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工作日报]]></title>
    <url>%2F2018%2F02%2F26%2F%E5%B7%A5%E4%BD%9C%E6%97%A5%E6%8A%A5%2F</url>
    <content type="text"><![CDATA[工作日报将工作日报发到钉钉 @（领导名）***日报--（自己名字） 今日主要工作内容： 任务清单ID. - 任务标题（完成状态） 明日主要工作计划： 任务清单ID.-（任务清单标题） 现在遇到的困难： 任务清单ID 困难描述 例子： @yunshu2009（云舒）2018-2-26 --小明 今日主要工作内容： 1. #0224-001 - 博客系统登录 （已完成） 2. #0224-002 - 博客系统注册（已完成） 3. #0226-003 - 博客发表文章（未完成） 明日工作计划： 1. #0226-003 完成“博客发表文章功能” 现在遇到的困难： #0226-003 git提交代码时发生代码冲突，待与同事一同协助解决～ 团队协作任务清单软件 asana teambution]]></content>
      <tags>
        <tag>管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redis的数据类型以及使用场景]]></title>
    <url>%2F2018%2F02%2F25%2FRedis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%2F</url>
    <content type="text"><![CDATA[参考：https://mengkang.net/356.html]]></content>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[让github上fork的项目同步原项目]]></title>
    <url>%2F2018%2F02%2F24%2F%E8%AE%A9github%E4%B8%8Afork%E7%9A%84%E9%A1%B9%E7%9B%AE%E5%90%8C%E6%AD%A5%E5%8E%9F%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[1234567891011121314## 先clone到本地仓库git clone https://github.com/yunshu2009/think.git## 保持和远程仓库同步git remote add upstream https://github.com/top-think/think.git## 拉取远程仓库最新代码git fetch upstream## 合并到本地仓库git merge upstream/master## 及时更新最新改动git pull --rebase]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用SSR科学上网]]></title>
    <url>%2F2018%2F02%2F19%2F%E4%BD%BF%E7%94%A8SSR%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%2F</url>
    <content type="text"><![CDATA[使用一键安装脚本安装shadowsocksR参考：https://shadowsocks.be/9.html 123wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.shchmod +x shadowsocksR.sh./shadowsocksR.sh 在CentOS 7上安装BBR加速参考： 部署方法：https://www.vultr.com/docs/how-to-deploy-google-bbr-on-centos-7) 一键安装脚本：https://github.com/teddysun/across/raw/master/bbr.sh 检测linux vps是xen openvz还是kvm的方法https://blog.slogra.com/post-632.html SSR客户端MAC客户端： https://github.com/qinyuhang/ShadowsocksX-NG-R/releases Linux客户端：https://raw.githubusercontent.com/the0demiurge/CharlesScripts/master/charles/bin/ssr Windows客户端：https://github.com/shadowsocksr-backup/shadowsocksr-csharp/releases IOS客户端：Potatso Lite、Potatso、shadowrocket (需要使用美区apple id下载软件) SSR多用户配置配置文件如下 123456789101112131415161718192021&#123;&quot;server&quot;:&quot;0.0.0.0&quot;,&quot;server_ipv6&quot;: &quot;[::]&quot;,&quot;local_address&quot;:&quot;127.0.0.1&quot;,&quot;local_port&quot;:1080,&quot;port_password&quot;:&#123; &quot;8989&quot;:&quot;password1&quot;,//着里输入想要的端口和密码 &quot;8990&quot;:&quot;password2&quot;， &quot;8991&quot;:&quot;password3&quot;&#125;,&quot;timeout&quot;:300,&quot;method&quot;:&quot;aes-256-cfb&quot;,//加密方式可以修改也可以不修改本人用chacha20&quot;protocol&quot;: &quot;origin&quot;,//协议也是可以修改了本人用auth_sha1&quot;protocol_param&quot;: &quot;&quot;,&quot;obfs&quot;: &quot;plain&quot;,//这里很重要,免流的请注意必须修改,本人用http_simple&quot;obfs_param&quot;: &quot;&quot;,&quot;redirect&quot;: &quot;&quot;,&quot;dns_ipv6&quot;: false,&quot;fast_open&quot;: false,&quot;workers&quot;: 1&#125; 然后修改防火墙，添加上面添加的端口即可，重启防火墙和SSR即可。 参考链接：https://www.cnblogs.com/gne-hwz/p/6662000.html 其他参考 http://blog.sina.com.cn/s/blog_4891cbc50102x5lw.html SSR共享如果你感觉梯子搭建麻烦，也可联系我共享SSR ~~]]></content>
      <tags>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开发一个php扩展]]></title>
    <url>%2F2018%2F02%2F18%2F%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAphp%E6%89%A9%E5%B1%95%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[使用Hexo搭建个人博客]]></title>
    <url>%2F2018%2F02%2F12%2F%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[今天花了好多时间好好地倒腾了下个人博客，使用hexo + hexo next主题搭建。顺便在godaddy买了这个“yunshu.me”域名，24块钱，比阿里云便宜好多，哈哈。 搭建这个博客安装了好多npm包，有以下这些：…]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
</search>
